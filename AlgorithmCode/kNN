import csv
import random
import math

def loadCsv (myfile):
    lines = csv.reader(open(myfile,""))
    dataset = list(lines)
    for i in range(len(dataset)):
        dataset[i]= [float(x) for x in dataset[i]]
    return dataset



def separateByClass(dataset):
    separated = {}
    for i in range(len(dataset)):
            vector= dataset[i]
    if(vector[-1] not in separated):
        separated[vector[-1]]= []
        separated[vector[-1]].append(vector)
    return separated


def P_root(m,p_root):
   
 return round (decimal(m) ** decimal((1/float(p_root))),k)



def MinkowskiDistance(x,xi,p):
    return P_root(sum(pow((a-b),p) for a, b in zip(x, xi)),p)


def Neighbors(train_dataSet, test_dataset, k):
    distances = []
    neighbor = []
    L_train=len(train_dataSet)
    L_test=len(test_dataset)
    for x in range(L_train):
        dis = MinkowskiDistance(test_dataset,train_dataSet,L_test)
        distances.append((train_dataSet, dis))
        distances.sort(key=operator.itemgetter(1))
   
    for x in range(k):
        neighbor.append(distances[x][0])
        
        return neighbor

def Response(neighbor):
    classVotes = {}
    for x in range(len(neighbor)):
            response = neighbor[x][-1]
            if response in classVotes:
                classVotes[response] += 1
    else:
        classVotes[response] = 1
    sortedVotes = sorted(classVotes.iteritems(), key=operator.itemgetter(1), reverse=True)

    return sortedVotes[0][0]

def accuracy(test,predict):
    correct=0
    for i in test:
        if test ==predict:
            correct +=1
           
            return float(corect/len(test))*100.00
        
        
def main():
    myfile = ''
    train_dataSet=[]
    test_dataset=[]
    splitRatio = 0.67
    dataset = loadCsv(myfile)
    train_dataSet, test_dataset = splitDataset(dataset, splitRatio)
    predictions=[]
    k = 3
    for x in range(len(test_dataset)):
        neighbor = Neighbors(train_dataSet, test_dataset[x], k)
        result = Response(neighbor)
        predictions.append(result)
        
    predictions = getPredictions(summaries, testSet)
    accuracy = getAccuracy(testSet, predictions)
    print('Accuracy: {0}%').format(accuracy)

    
    main()